===================================================================================
手动代码修改清单
===================================================================================

本文件包含需要手动复制粘贴的完整代码。

===================================================================================
1. CharacterController.java - 添加AI生成接口
===================================================================================

文件位置: src/main/java/com/linyuan/storyforge/controller/CharacterController.java

在 deleteCharacter() 方法之前添加以下代码：

    /**
     * Generate character using AI
     * POST /api/characters/generate?projectId=xxx&keywords=xxx
     */
    @PostMapping("/generate")
    @ResponseStatus(HttpStatus.CREATED)
    public ApiResponse<CharacterDTO> generateCharacter(
            @RequestParam UUID projectId,
            @RequestParam String keywords) {
        log.info("POST /api/characters/generate - Generating character with AI for project: {}, keywords: {}",
                projectId, keywords);

        try {
            CharacterDTO generatedCharacter = characterService.generateCharacterWithAI(projectId, keywords);
            return ApiResponse.success(generatedCharacter, "Character generated successfully using AI");
        } catch (RuntimeException e) {
            log.error("Failed to generate character with AI", e);
            return ApiResponse.error(500, "AI generation failed: " + e.getMessage());
        }
    }

===================================================================================
2. application.yml - 修改AI配置
===================================================================================

文件位置: src/main/resources/application.yml

将AI配置部分（从第22行开始）改为：

# AI 配置 (环境无关)
ai:
  # 百度千帆配置
  qianfan:
    enabled: true
    api-key: ${QIANFAN_API_KEY:}
    secret-key: ${QIANFAN_SECRET_KEY:}

  # OpenAI兼容配置（使用百度千帆V2 API）
  openai:
    base-url: https://qianfan.baidubce.com/v2
    model: ERNIE-3.5-8K
    temperature: 0.7
    max-tokens: 2000

  # Prompt 模板配置
  prompt:
    # 提示词模板（保持原有模板不变）
    templates:
      character-creation: |
        你是一位专业的小说角色创作助手。请根据以下信息生成详细的角色设定。
        ...（保持原有内容）

===================================================================================
3. CharacterService.java - 添加imports和成员变量
===================================================================================

文件位置: src/main/java/com/linyuan/storyforge/service/CharacterService.java

在现有imports后添加：

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

修改imports中的java.util部分为：

import java.util.*;

在类的成员变量中添加（private final WorldviewRepository worldviewRepository; 之后）：

    private final AiGenerationService aiGenerationService;
    private final ObjectMapper objectMapper = new ObjectMapper();

===================================================================================
4. CharacterService.java - 添加AI生成方法
===================================================================================

在 deleteCharacter() 方法之后、convertToDTO() 方法之前添加以下所有方法：

    /**
     * Generate character using AI
     *
     * @param projectId 项目ID
     * @param keywords 关键词描述（如："一个勇敢的年轻剑客"）
     * @return 生成的角色DTO
     */
    @Transactional
    public CharacterDTO generateCharacterWithAI(UUID projectId, String keywords) {
        log.info("使用AI生成角色，项目: {}, 关键词: {}", projectId, keywords);

        // 检查AI服务是否可用
        if (!aiGenerationService.isAvailable()) {
            throw new RuntimeException("AI服务不可用，请检查百度千帆API配置");
        }

        // 验证项目存在
        Project project = projectRepository.findById(projectId)
                .orElseThrow(() -> new ResourceNotFoundException("Project", "id", projectId));

        // 准备模板变量
        Map<String, Object> variables = new HashMap<>();
        variables.put("input", keywords);
        variables.put("genre", project.getGenre() != null ? project.getGenre() : "通用");

        // 如果项目有世界观，添加世界观上下文
        // TODO: 从数据库加载世界观详细信息
        variables.put("worldview_context", "现代都市背景");

        // 获取已有角色列表（避免重复）
        List<Character> existingCharacters = characterRepository.findByProjectId(projectId);
        String existingCharactersDesc = existingCharacters.isEmpty() ? "暂无"
                : existingCharacters.stream()
                .map(c -> c.getName() + "(" + (c.getOccupation() != null ? c.getOccupation() : "未知职业") + ")")
                .collect(Collectors.joining(", "));
        variables.put("existing_characters", existingCharactersDesc);

        try {
            // 调用AI生成
            String aiResponse = aiGenerationService.generateWithTemplate(
                    "character-creation",
                    variables
            );

            log.debug("AI生成的角色内容: {}", aiResponse);

            // 解析AI响应为CharacterDTO
            CharacterDTO characterDTO = parseAIResponseToDTO(aiResponse);
            characterDTO.setProjectId(projectId);

            // 保存到数据库
            return createCharacter(characterDTO);

        } catch (Exception e) {
            log.error("AI生成角色失败", e);
            throw new RuntimeException("AI生成角色失败: " + e.getMessage(), e);
        }
    }

    /**
     * Parse AI response to CharacterDTO
     * 支持多种格式：纯JSON、Markdown代码块包裹的JSON
     */
    private CharacterDTO parseAIResponseToDTO(String aiResponse) throws Exception {
        if (aiResponse == null || aiResponse.trim().isEmpty()) {
            throw new IllegalArgumentException("AI响应为空");
        }

        // 清理Markdown代码块标记
        String cleanJson = aiResponse.trim();
        if (cleanJson.startsWith("```")) {
            cleanJson = cleanJson.replaceAll("```json\\s*", "")
                    .replaceAll("```\\s*$", "")
                    .trim();
        }

        try {
            JsonNode rootNode = objectMapper.readTree(cleanJson);

            // 构建CharacterDTO
            CharacterDTO dto = new CharacterDTO();

            // 基础信息
            if (rootNode.has("basicInfo")) {
                JsonNode basicInfo = rootNode.get("basicInfo");
                dto.setName(getTextValue(basicInfo, "name", "姓名"));
                dto.setAge(getIntValue(basicInfo, "age", "年龄"));
                dto.setAppearance(getTextValue(basicInfo, "appearance", "外貌特征", "外貌"));
                dto.setOccupation(getTextValue(basicInfo, "occupation", "职业"));
            }

            // 性格特征
            if (rootNode.has("personality")) {
                JsonNode personality = rootNode.get("personality");
                dto.setPersonalityTraits(getListValue(personality, "traits", "核心性格", "性格特征"));
            }

            // 背景故事
            dto.setBackgroundStory(getTextValue(rootNode, "backstory", "background_story", "backgroundStory", "背景故事"));
            dto.setChildhoodExperience(getTextValue(rootNode, "childhood", "childhood_experience", "童年经历"));

            // 深层设定
            dto.setValuesBeliefs(getTextValue(rootNode, "values", "valuesBeliefs", "价值观"));
            dto.setFears(getListValue(rootNode, "fears", "恐惧", "内心恐惧"));
            dto.setDesires(getListValue(rootNode, "desires", "欲望", "欲望动机"));
            dto.setGoals(getListValue(rootNode, "goals", "目标", "人生目标"));

            // 行为特征
            if (rootNode.has("behaviorPatterns")) {
                JsonNode behavior = rootNode.get("behaviorPatterns");
                dto.setSpeechPattern(getTextValue(behavior, "speech", "speechPattern", "说话方式"));
                dto.setCatchphrases(getListValue(behavior, "catchphrases", "口癖"));
                dto.setBehavioralHabits(getListValue(behavior, "habits", "behavioralHabits", "行为习惯"));
            }

            // 生成角色概要
            dto.setCharacterSummary(generateCharacterSummary(dto));

            // 验证必填字段
            if (dto.getName() == null || dto.getName().isEmpty()) {
                throw new IllegalArgumentException("AI生成的角色缺少姓名字段");
            }

            return dto;

        } catch (Exception e) {
            log.error("解析AI响应失败，响应内容: {}", cleanJson);
            throw new RuntimeException("解析AI生成的角色数据失败: " + e.getMessage(), e);
        }
    }

    /**
     * Helper: 从JsonNode中获取文本值，支持多个可能的字段名
     */
    private String getTextValue(JsonNode node, String... fieldNames) {
        for (String fieldName : fieldNames) {
            if (node.has(fieldName) && !node.get(fieldName).isNull()) {
                return node.get(fieldName).asText();
            }
        }
        return null;
    }

    /**
     * Helper: 从JsonNode中获取整数值
     */
    private Integer getIntValue(JsonNode node, String... fieldNames) {
        for (String fieldName : fieldNames) {
            if (node.has(fieldName) && !node.get(fieldName).isNull()) {
                return node.get(fieldName).asInt();
            }
        }
        return null;
    }

    /**
     * Helper: 从JsonNode中获取列表值
     */
    private List<String> getListValue(JsonNode node, String... fieldNames) {
        for (String fieldName : fieldNames) {
            if (node.has(fieldName) && node.get(fieldName).isArray()) {
                List<String> result = new ArrayList<>();
                node.get(fieldName).forEach(item -> result.add(item.asText()));
                return result;
            }
        }
        return new ArrayList<>();
    }

    /**
     * 生成角色概要（用于AI prompt）
     */
    private String generateCharacterSummary(CharacterDTO dto) {
        StringBuilder summary = new StringBuilder();
        summary.append(dto.getName());

        if (dto.getAge() != null) {
            summary.append("，").append(dto.getAge()).append("岁");
        }

        if (dto.getOccupation() != null && !dto.getOccupation().isEmpty()) {
            summary.append("，").append(dto.getOccupation());
        }

        if (dto.getPersonalityTraits() != null && !dto.getPersonalityTraits().isEmpty()) {
            summary.append("。性格：").append(String.join("、", dto.getPersonalityTraits()));
        }

        return summary.toString();
    }

===================================================================================
完成！
===================================================================================

请按照以下顺序进行修改：

1. 修改 application.yml（第2部分）
2. 修改 CharacterController.java（第1部分）
3. 修改 CharacterService.java imports和成员变量（第3部分）
4. 修改 CharacterService.java 添加AI生成方法（第4部分）
5. 设置环境变量
6. 运行测试

详细步骤请参考 QIANFAN_SETUP.md 文件。
